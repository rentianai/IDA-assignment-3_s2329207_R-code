## Q1
## (a)
library(mice)
require(mice)
## load the nhanes dataset
data(nhanes)
## number of observations
n = nrow(nhanes)
## number of complete cases
c_n = nrow(cc(nhanes))
## percentage of incomplete cases
ic_p = 1-c_n/n
ic_p

# visualise the missing data patterns
md.pattern(nhanes)
md.pairs(nhanes)

## (b)
## step 1: impute the data with mice using the defaults with seed=1
imps_1 <- mice(nhanes, printFlag = FALSE, seed = 1)
imps_1
## step 2: predict bmi from age, hyp, and chl by the normal linear regression model
fits_1 <- with(imps_1, lm(bmi ~ age + hyp + chl))
summary(fits_1$analyses[[1]]) ## summary of the first imputed datasets
## step 3: pool the result
ests_1 <- pool(fits_1) 
summary(ests_1, conf.int = TRUE)

## the proportions of variance due to the missing data
ests_1$pooled$lambda
## parameters appear to be most affected by the nonresponse
ests_1$pooled$r

## (c)
## using the M=20 and changing the seed
ests1_s1 <- pool(with(mice(nhanes, printFlag = FALSE, seed = 1), lm(bmi ~ age + hyp + chl)))
ests1_s2 <- pool(with(mice(nhanes, printFlag = FALSE, seed = 2), lm(bmi ~ age + hyp + chl)))
ests1_s3 <- pool(with(mice(nhanes, printFlag = FALSE, seed = 3), lm(bmi ~ age + hyp + chl)))
ests1_s4 <- pool(with(mice(nhanes, printFlag = FALSE, seed = 4), lm(bmi ~ age + hyp + chl)))
ests1_s5 <- pool(with(mice(nhanes, printFlag = FALSE, seed = 5), lm(bmi ~ age + hyp + chl)))
ests1_s6 <- pool(with(mice(nhanes, printFlag = FALSE, seed = 6), lm(bmi ~ age + hyp + chl)))

summary(ests1_s1, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s2, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s3, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s4, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s5, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s6, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]

## The proportions of variance due to the missing data in different seed
p_data <- c(ests1_s1$pooled$lambda, ests1_s2$pooled$lambda, ests1_s3$pooled$lambda,
            ests1_s4$pooled$lambda, ests1_s5$pooled$lambda, ests1_s6$pooled$lambda)
p2 <- matrix(p_data, nrow = 6, ncol = 4, byrow = TRUE)
colnames(p2) <- c("bmi", "age", "hyp", "chl")
rownames(p2) <- c("seed1", "seed2", "seed3", "seed4", "seed5", "seed6")
p2

## The most affected parameters index in different seeds
p1 <- c(which.max(ests1_s1$pooled$r), which.max(ests1_s2$pooled$r), 
        which.max(ests1_s3$pooled$r), which.max(ests1_s4$pooled$r),
        which.max(ests1_s5$pooled$r), which.max(ests1_s6$pooled$r))
cat("the index of parameters appear to be most affected by the nonresponse is", p1)

## (d)
## using the M=100 and changing the seed
ests1_s1_m <- pool(with(mice(nhanes, printFlag = FALSE, seed = 1, m=100), lm(bmi ~ age + hyp + chl)))
ests1_s2_m <- pool(with(mice(nhanes, printFlag = FALSE, seed = 2, m=100), lm(bmi ~ age + hyp + chl)))
ests1_s3_m <- pool(with(mice(nhanes, printFlag = FALSE, seed = 3, m=100), lm(bmi ~ age + hyp + chl)))
ests1_s4_m <- pool(with(mice(nhanes, printFlag = FALSE, seed = 4, m=100), lm(bmi ~ age + hyp + chl)))
ests1_s5_m <- pool(with(mice(nhanes, printFlag = FALSE, seed = 5, m=100), lm(bmi ~ age + hyp + chl)))
ests1_s6_m <- pool(with(mice(nhanes, printFlag = FALSE, seed = 6, m=100), lm(bmi ~ age + hyp + chl)))

summary(ests1_s1_m, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s2_m, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s3_m, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s4_m, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s5_m, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]
summary(ests1_s6_m, conf.int = TRUE)[, c(2, 3, 6, 7, 8)]

p_data_m <- c(ests1_s1_m$pooled$lambda, ests1_s2_m$pooled$lambda, ests1_s3_m$pooled$lambda,
            ests1_s4_m$pooled$lambda, ests1_s5_m$pooled$lambda, ests1_s6_m$pooled$lambda)
p2_m <- matrix(p_data_m, nrow = 6, ncol = 4, byrow = TRUE)
colnames(p2_m) <- c("bmi", "age", "hyp", "chl")
rownames(p2_m) <- c("seed1", "seed2", "seed3", "seed4", "seed5", "seed6")
p2_m

p1_m <- c(which.max(ests1_s1_m$pooled$r), which.max(ests1_s2_m$pooled$r), 
        which.max(ests1_s3_m$pooled$r), which.max(ests1_s4_m$pooled$r),
        which.max(ests1_s5_m$pooled$r), which.max(ests1_s6_m$pooled$r))
cat("the index of parameters appear to be most affected by the nonresponse is", p1_m)

## Q2
load("dataex2.Rdata")
dataex2
##  stochastic regression imputation
k1=0
for (i in 1:100){
  
  ## step 1: impute the data with seed=1, m=20 using method norm.nob
  imps_2 <- mice(dataex2[,,i], method = "norm.nob", m=20, printFlag = FALSE, seed = 1)
  ## step 2: fit the normal linear regression model
  fits_2 <- with(imps_2, lm(Y ~ X))
  ## step 3: pool the results
  ests_2 <- pool(fits_2) 
  sum_2 = summary(ests_2, conf.int = TRUE)
  
  ##if the interval contains the true value of the parameter (3)
  if(3>=sum_2$`2.5 %`[2] & 3<=sum_2$`97.5 %`[2]){
    k1 = k1+1
  }
  
}
prop1 = k1/100
prop1

k2=0

##  the corresponding bootstrap based version
for (i in 1:100){
  
  ## step 1: impute the data with seed=1, m=20 using method norm.boot
  imps_2_2 <- mice(dataex2[,,i], method = "norm.boot", m=20, printFlag = FALSE, seed = 1)
  ## step 2: fit the normal linear regression model
  fits_2_2 <- with(imps_2_2, lm(Y ~ X))
  ## step 3: pool the results
  ests_2_2 <- pool(fits_2_2) 
  sum_2_2 = summary(ests_2_2, conf.int = TRUE)
  
  ##if the interval contains the true value of the parameter
  if(3>=sum_2_2$`2.5 %`[2] & 3<=sum_2_2$`97.5 %`[2]){
    k2 = k2+1
  }
}
prop2 = k2/100
prop2

## Q4
load("dataex4.Rdata")
str(dataex4)
# visualise the missing data patterns
md.pattern(dataex4)
## (a)
## step 1: impute the data with mice using the defaults with seed=1, m=50
imps_4 <- mice(dataex4, m= 50, printFlag = FALSE, seed = 1)
imps_4 
## step 2: predict y from x1, x2, and x1x2 by the normal linear regression model
fits_4 <- with(imps_4 , lm(y ~ x1 + x2 + x1:x2))
ests_4 <- pool(fits_4)
summary(ests_4, conf.int = TRUE)

## (b)
## calculating the interaction variable 
dataex4_1 = dataex4
int_4 = dataex4_1$x1*dataex4_1$x2
dataex4_1$x1x2 = int_4

## impute the data without any iterations
imps_4_2 <- mice(dataex4_1, maxit = 0)

## modify x1x2 term by passive imputation strategy
meth_4 <- imps_4_2$method
meth_4["x1x2"] <- "~I(x1*x2)"

## modify the predictor matrix
## x1x2 will not be used as predictor of x1 and x2
pred_4 <- imps_4_2$predictorMatrix
pred_4[c("x1", "x2"), "x1x2"] <- 0
pred_4

## step 1: impute the data with seed=1, m=50
imps_4_3 <- mice(dataex4_1, method = meth_4, predictorMatrix = pred_4, m= 50, 
                 printFlag = FALSE, seed = 1)
## step 2: predict y from x1, x2, and x1x2 by the normal linear regression model
fits_4_3 <- with(imps_4_3 , lm(y ~ x1 + x2 + x1:x2))
## step 3:pool the data
ests_4_3 <- pool(fits_4_3)

summary(ests_4_3, conf.int = TRUE)

## (c)
## step 1: impute the data with seed=1, m=50 
imps_4_4 <- mice(dataex4_1, m= 50, printFlag = FALSE, seed = 1)
## step 2: predict y from x1, x2, and x1x2 by the normal linear regression model
fits_4_4 <- with(imps_4_4 , lm(y ~ x1 + x2 + x1:x2))
## step 3:pool the data
ests_4_4 <- pool(fits_4_4)

summary(ests_4_4, conf.int = TRUE)

## Q5
## inspecte the data
load("NHANES2.RData")
dim(NHANES2)
str(NHANES2)

summary(NHANES2)

## visualise the missing data patterns
require(JointAI)
md_pattern(NHANES2, pattern = FALSE, color = c('#34111b', '#e30f41'))

## visualise how the distribution of the observed values
plot_all(NHANES2, breaks = 30, ncol = 4)

## impute the data without any iterations
imps_5_0 <- mice(NHANES2, maxit = 0)
imps_5_0

## use a normal distribution for the hgt variable
meth_5 <- imps_5_0$method
meth_5["hgt"] <- "norm"
meth_5

post_5 <- imps_5_0$post
post_5["hgt"] <- "imp[[j]][,i] <- squeeze(imp[[j]][,i], c(1, 3))"

## step 1: impute the data with seed=1, m=30, iter = 20
imp_5 <- mice(NHANES2, method = meth_5, maxit = 20, m = 30, seed = 1, printFlag = FALSE)

## check if mice() found any problem during the imputation
imp_5$loggedEvents

## check the chains of the imputed values
plot(imp_5, layout = c(4, 4))

## inspect the distribution
densityplot(imp_5)

require(usethis)
require(devtools)
require(reshape2)
require(RColorBrewer)
require(ggplot2)
source_url("https://gist.githubusercontent.com/NErler/0d00375da460dd33839b98faeee2fdab/raw/c6f537ecf80eddcefd94992ec7926aa57d454536/propplot.R")
propplot(imp_5)

## step 2 fit the normal linear regression model
fits_5 <- with(imp_5, lm(wgt ~ gender + age + hgt + WC))
summary(fits_5$analyses[[1]])

comp1 <- complete(imp_5, 1)
plot(fits_5$analyses[[1]]$fitted.values, residuals(fits_5$analyses[[1]]),
     xlab = "Fitted values", ylab = "Residuals")

qqnorm(rstandard(fits_5$analyses[[1]]), xlim = c(-4, 4), ylim = c(-6, 6))
qqline(rstandard(fits_5$analyses[[1]]), col = 2)

## step 3: pool the result
pool_ests_5 <- pool(fits_5)
summary <- summary(pool_ests_5, conf.int = TRUE)
summary

pool.r.squared(pool_ests_5, adjusted = TRUE)

fit_no_age <- with(imp_5, lm(wgt ~ age + hgt + WC))
D1(fits_5, fit_no_age)
